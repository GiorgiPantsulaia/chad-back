openapi: 3.0.0
info:
  title: MovieQuotes API
  description: MovieQuotes api routes and usage
  version: 0.1.9

servers:
  - url: http://localhost:8000/api
    description: local server
  - url: http://producation.app/api
    description: production server

paths:
  /register:
    post:
      tags:
        - "Authentication"
      summary: Creates a user.
      responses:
        "201":
          description: A success message.
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  name:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
                  password_confirmation:
                    type: string
                example: # Sample data
                  name: john doe
                  email: johnny@example.com
                  password: test12345
                  password_confirmation: test12345
        "422":
          description: Unprocessable content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The name format is invalid. (and 2 more errors)"
                  errors:
                    type: object
                    items:
                      type: array
                    properties:
                      name:
                        example: ["The name format is invalid."]
                      email:
                        example: ["The email must be a valid email address."]
                      password:
                        example: ["The password must be at least 8 characters."]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "test123"
                email:
                  type: string
                  example: "test@gmail.com"
                password:
                  type: string
                  example: "pass1234"
                password_confirmation:
                  type: string
                  example: "pass1234"
  /login:
    post:
      tags:
        - "Authentication"
      summary: Authenticates a user.
      responses:
        "200":
          description: A JSON array containing the auth token
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  name:
                    type: string
                  password:
                    type: string
                example: # Sample data
                  access_token: "luI1Ymbfu0lo8srrXebTL7f638coXKxztjEvFml2"
                  token_type: "bearer"
                  expires_in: 3600
                  username: "johndoe123"
                  user_email: "john@gmail.com"
                  user_id: 6
                  user_pfp: "storage/profile-pictures/1659195277.my-picture.png"

        "401":
          description: User does not exist message
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "incorrect credentials"
        "403":
          description: Email not activated message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Check your email to activate account."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "john123"
                password:
                  type: string
                  example: "password123"
  /logout:
    post:
      tags:
        - "Authentication"
      summary: Logs user out.
      responses:
        "200":
          description: A JSON response with success message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  message:
                    type: string
                    example: "Logged out successfully."
  /confirm-email:
    post:
      tags:
        - "Authentication"
      summary: Sends confirmation email.
      responses:
        "200":
          description: A JSON response with success message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  message:
                    type: string
                    example: "Email confirmation sent."
        "404":
          description: A JSON response with error message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  error:
                    type: string
                    example: "User not found"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "johndoe@gmail.com"
  /verify-email:
    post:
      tags:
        - "Authentication"
      summary: Verifies user email with token
      responses:
        "200":
          description: A JSON response with success message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  message:
                    type: string
                    example: "Email verified successfully."
        "400":
          description: Invalid token error
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  error:
                    type: string
                    example: "invalid token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "ce4eba3dcc2cb3ede7ba3be4b6096de1b35990de"
  /reset-password:
    patch:
      tags:
        - "Authentication"
      summary: Resets user password
      responses:
        "200":
          description: A JSON response with success message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  message:
                    type: string
                    example: "Password updated successfully."
        "422":
          description: Invalid password format
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  message:
                    type: string
                    example: "The password must be at least 8 characters. (and 1 more error)"
                  errors:
                    type: object
                    items:
                      type: array
                    properties:
                      password:
                        example:
                          [
                            "The password must be at least 8 characters.",
                            "The password format is invalid.",
                          ]
        "500":
          description: User not found
          content:
            application/json:
              schema:
                type: object

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "pass1234"
                code:
                  type: string
                  example: "ce4eba3dcc2cb3ede7ba3be4b6096de1b35990de"
  /comments:
    post:
      tags:
        - "Quotes"
      summary: Creates comment for a quote
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
                properties:
                  message:
                    example: "Comment added successfully"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quote_id:
                  type: number
                  example: 4
                body:
                  type: string
                  example: "nice quote..."
                recipient_id:
                  type: number
                  example: 5
  /all-quotes:
    get:
      tags:
        - "Quotes"
      summary: Returns array of quotes
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON array of paginated quotes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Quote"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /quotes/{id}:
    get:
      tags:
        - "Quotes"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Returns a single quote
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON of single quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /like/{quote}:
    post:
      tags:
        - "Quotes"
      parameters:
        - name: quote
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Attaches a like to a quote
      security:
        - BearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/LikeQuoteResponse"
        "404":
          $ref: "#/components/responses/QuoteNotFoundResponse"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /unlike/{quote}:
    post:
      tags:
        - "Quotes"
      parameters:
        - name: quote
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Detaches a like from a quote
      security:
        - BearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/LikeQuoteResponse"
        "404":
          $ref: "#/components/responses/QuoteNotFoundResponse"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /quotes:
    post:
      tags:
        - "Quotes"
      summary: Creates a quote
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Quote added successfully
        "422":
          description: Bad request error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: image is required
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                english_quote:
                  type: string
                  example: "some cool quote"
                georgian_quote:
                  type: string
                  example: "ციტატა"
                movie_id:
                  type: number
                  example: 4
                img:
                  type: string
                  format: binary
  /update-quote/{quote}:
    patch:
      tags:
        - "Quotes"
      parameters:
        - name: quote
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Updates a quote
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Quote updated successfully
        "404":
          $ref: "#/components/responses/QuoteNotFoundResponse"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                english_quote:
                  type: string
                  example: "some cool quote"
                georgian_quote:
                  type: string
                  example: "ციტატა"
                img:
                  type: string
                  format: binary
  /quote/{quote}:
    delete:
      tags:
        - "Quotes"
      parameters:
        - name: quote
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Deletes a quote
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Quote deleted successfully
        "404":
          $ref: "#/components/responses/QuoteNotFoundResponse"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /user-movies:
    get:
      tags:
        - "Movies"
      summary: Get all movies of current user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON array of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
  /movies:
    post:
      tags:
        - "Movies"
      summary: Creates a movie
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie added successfully
        "422":
          description: Bad request error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The img field is required.
                  errors:
                    type: object
                    properties:
                      img:
                        type: string
                        example: "The img field is required."
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                english_title:
                  type: string
                  example: "Forrest Gump"
                georgian_title:
                  type: string
                  example: "ფორესტ გამპი"
                english_description:
                  type: string
                  example: "english description"
                georgian_description:
                  type: string
                  example: "ქართული აღწერა"
                director_eng:
                  type: string
                  example: "director name"
                director_geo:
                  type: string
                  example: "რეჟისორი"
                release_date:
                  type: number
                  example: 1994
                income:
                  type: number
                  example: 680000000
                img:
                  type: string
                  format: binary
  /movie-description:
    post:
      tags:
        - "Movies"
      summary: Creates a movie
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON object of a single movie
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Movie"
        "500":
          description: Movie does not exist error
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
                  example: "forrest-gump"
  /edit-movie/{movie}:
    patch:
      tags:
        - "Movies"
      parameters:
        - name: movie
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Edits the movie
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie updated successfully"
        "404":
          $ref: "#/components/responses/MovieNotFoundResponse"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                english_title:
                  type: string
                  example: "Forrest Gump"
                georgian_title:
                  type: string
                  example: "ფორესტ გამპი"
                english_description:
                  type: string
                  example: "english description"
                georgian_description:
                  type: string
                  example: "ქართული აღწერა"
                director_eng:
                  type: string
                  example: "director name"
                director_geo:
                  type: string
                  example: "რეჟისორი"
                release_date:
                  type: number
                  example: 1994
                income:
                  type: number
                  example: 680000000
          multipart/form-data:
            schema:
              type: object
              required:
                - img
              properties:
                img:
                  type: string
                  format: binary
  /movie/{movie}:
    delete:
      tags:
        - "Movies"
      parameters:
        - name: movie
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Deletes the movie
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie Deleted successfully"
        "404":
          $ref: "#/components/responses/MovieNotFoundResponse"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /notifications:
    get:
      tags:
        - "Notifications"
      summary: Get all notifications of current user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON array of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      example: 1
                    user_id:
                      type: number
                      example: 2
                    recipient_id:
                      type: number
                      example: 1
                    quote_id:
                      type: number
                      example: 4
                    type:
                      type: string
                      example: "like"
                    state:
                      type: string
                      example: "unread"
                    created_at:
                      type: string
                      example: "2022-08-03 11:18:46"
                    sender:
                      $ref: "#/components/schemas/Author"
  /notifications-read:
    post:
      tags:
        - "Notifications"
      summary: Marks all notifications as read
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notifications marked as read"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /notification-read/{notification}:
    patch:
      tags:
        - "Notifications"
      parameters:
        - name: notification
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Marks one notification as read
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification marked as read"
        "404":
          description: Not found error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No query results for model [App\\Models\\Notification] 44"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
  /user/{user}:
    patch:
      tags:
        - "User"
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Edits the user info
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A JSON array response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  user:
                    $ref: "#/components/schemas/Author"
                  confirmation_sent:
                    type: boolean
                    example: false
        "409":
          description: User exists message
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with this email already exists"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "coolname123"
                email:
                  type: string
                  example: "test@gmail.com"
                password:
                  type: string
                  example: "pass1234"
                password_confirmation:
                  type: string
                  example: "pass1234"
          multipart/form-data:
            schema:
              type: object
              required:
                - img
              properties:
                img:
                  type: string
                  format: binary
  /update-email:
    patch:
      tags:
        - "User"
      summary: Updates user email
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated successfully"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verification_code:
                  type: string
                  example: "VIuXCXOkHmUZToR15ygJ"
                email:
                  type: string
                  example: "test@gmail.com"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Author:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
        email_verified_at:
          type: string
        verification_code:
          type: string
        profile_pic:
          type: string
        google_user:
          type: boolean
    Quote:
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
        movie_id:
          type: number
        body:
          type: object
        thumbnail:
          type: string
        movie:
          type: object
          properties:
            id:
              type: number
            user_id:
              type: number
            title:
              type: object
            slug:
              type: string
            thumbnail:
              type: string
            release_date:
              type: number
            description:
              type: object
            director:
              type: object
            income:
              type: number
        author:
          $ref: "#/components/schemas/Author"
        comments:
          type: object
          properties:
            id:
              type: number
            user_id:
              type: number
            quote_id:
              type: number
            body:
              type: object
            author:
              $ref: "#/components/schemas/Author"
        likes:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Author"
    Movie:
      type: object
      properties:
        id:
          type: number
          example: 18
        title:
          type: object
          properties:
            en:
              type: string
              example: "Forrest Gump"
            ka:
              type: string
              example: "ფორესტ გამპი"
        description:
          type: object
          properties:
            en:
              type: string
              example: "Movie description"
            ka:
              type: string
              example: "ფილმის აღწერა"
        director:
          type: object
          properties:
            en:
              type: string
              example: "Robert Zemeckis"
            ka:
              type: string
              example: "რობერტ ზემეკისი"
        slug:
          type: string
          example: "forrest-gump"
        thumbnail:
          type: string
          example: "storage/movie-thumbnails/1659519781.2.png"
        income:
          type: number
          example: 680000000
        release_date:
          type: number
          example: 1994
        user_id:
          type: number
          example: 44
        author:
          $ref: "#/components/schemas/Author"
        quotes:
          type: object
          properties:
            id:
              type: number
              example: 14
            user_id:
              type: number
              example: 44
            movie_id:
              type: number
              example: 18
            body:
              type: object
              properties:
                en:
                  type: string
                  example: "quote"
                ka:
                  type: string
                  example: "ციტატა"
            thumbnail:
              type: string
              example: "storage/quote-thumbnails/1659519790.2.png"
  responses:
    LikeQuoteResponse:
      description: A success message
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
    QuoteNotFoundResponse:
      description: Not found error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "No query results for model [App\\Models\\Quote] 22"
    MovieNotFoundResponse:
      description: Not found error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "No query results for model [App\\Models\\Movie] 44"
    UnauthenticatedError:
      description: Unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthenticated"
